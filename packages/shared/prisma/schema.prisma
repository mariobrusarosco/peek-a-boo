// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Organization model for multi-tenancy
model Organization {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  apiKey      String        @unique @default(uuid())
  users       User[]
  projects    Project[]
  environments Environment[]
  flags       Flag[]

  @@map("organizations")
}

// User model for authentication
model User {
  id             String        @id @default(cuid())
  name           String?
  email          String        @unique
  emailVerified  DateTime?
  image          String?
  password       String?       // Hashed password
  role           UserRole      @default(MEMBER)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  accounts       Account[]
  sessions       Session[]
  projects       ProjectMember[]

  @@map("users")
}

// NextAuth models
model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique
  userId       String
  expires      DateTime
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Project model for organizing flags
model Project {
  id              String          @id @default(cuid())
  name            String
  description     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  organizationId  String
  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members         ProjectMember[]
  flags           Flag[]

  @@map("projects")
}

// Project membership
model ProjectMember {
  id          String      @id @default(cuid())
  projectId   String
  userId      String
  role        ProjectRole @default(MEMBER)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

// Environment model (e.g., development, staging, production)
model Environment {
  id              String          @id @default(cuid())
  name            String
  key             String
  description     String?
  color           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  organizationId  String
  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  flagValues      FlagValue[]

  @@unique([organizationId, key])
  @@map("environments")
}

// Feature Flag model
model Flag {
  id              String          @id @default(cuid())
  name            String
  key             String
  description     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  organizationId  String
  projectId       String
  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project         Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  values          FlagValue[]
  variations      FlagVariation[]

  @@unique([projectId, key])
  @@map("flags")
}

// Flag variation (e.g., true/false, string values, etc.)
model FlagVariation {
  id          String       @id @default(cuid())
  name        String?
  value       Json         // Stored as JSON to support multiple types
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  flagId      String
  flag        Flag         @relation(fields: [flagId], references: [id], onDelete: Cascade)
  flagValues  FlagValue[]

  @@map("flag_variations")
}

// Flag values per environment
model FlagValue {
  id              String        @id @default(cuid())
  enabled         Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  flagId          String
  environmentId   String
  variationId     String
  flag            Flag          @relation(fields: [flagId], references: [id], onDelete: Cascade)
  environment     Environment   @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  variation       FlagVariation @relation(fields: [variationId], references: [id], onDelete: Cascade)
  rules           FlagRule[]

  @@unique([flagId, environmentId])
  @@map("flag_values")
}

// Flag rules for targeting specific users/contexts
model FlagRule {
  id              String        @id @default(cuid())
  name            String?
  description     String?
  attribute       String        // The attribute to target (e.g., "email", "country")
  operator        RuleOperator  // The operator to apply (e.g., "equals", "contains")
  value           Json          // The value to compare against
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  flagValueId     String
  flagValue       FlagValue     @relation(fields: [flagValueId], references: [id], onDelete: Cascade)

  @@map("flag_rules")
}

// Audit log for tracking changes
model AuditLog {
  id            String        @id @default(cuid())
  action        String
  entity        String
  entityId      String
  metadata      Json?
  createdAt     DateTime      @default(now())
  userId        String?
  organizationId String

  @@map("audit_logs")
}

// Enums
enum UserRole {
  ADMIN
  MEMBER
}

enum ProjectRole {
  ADMIN
  EDITOR
  VIEWER
  MEMBER
}

enum RuleOperator {
  EQUALS
  NOT_EQUALS
  CONTAINS
  NOT_CONTAINS
  STARTS_WITH
  ENDS_WITH
  GREATER_THAN
  LESS_THAN
  IN
  NOT_IN
  MATCHES
  PERCENT
} 